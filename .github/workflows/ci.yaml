#ci.yaml
name: CI/CD
permissions:
  contents: read
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    name: Continuous Integration
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install UV
        uses: astral-sh/setup-uv@v5

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install all dependencies and project
        run: uvx sync --all-extras --dev

      #-name: Run tests
        # For example, using `pytest`
      #run: uv run pytest tests

      - name: Run Pytest with coverage
        run: pytest --cov=py_launch_blueprint/ --cov-report=xml

    #Run type checker
      - name: Run type checker
        run: uvx mypy py_launch_blueprint/

    # Check linters using ruff
      - name: Check linters
        run: uvx ruff check py_launch_blueprint/
      - name: Upload coverage report to Codecov
        uses: codecov/codecov-action@v4

 # Only run security checks on pull requests from the main repository
security:
  if: github.event.pull_request.head.repo.full_name == github.repository
  runs-on: ubuntu-latest
  steps:
  - uses: actions/checkout@v4

  - name: Run Safety CLI to check for vulnerabilities
    uses: pyupio/safety-action@v1
    with:
      api-key: ${{ secrets.SAFETY_API_KEY }}
      args: --detailed-output # To always see detailed output from this action

# The publish job is commented out, but here's a reference if you want to re-enable it
# publish:
#   needs: [test, security]
#   if: github.event_name == 'push' && github.ref == 'refs/heads/main'
#   runs-on: ubuntu-latest
#   steps:
#   - uses: actions/checkout@v4
#   - name: Build and publish to PyPI
#     env:
#       TWINE_USERNAME: __token__
#       TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
#     run: |
#       uv pip install build twine
#       python -m build
#       twine upload dist/*
