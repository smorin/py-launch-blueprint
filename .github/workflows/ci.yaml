name: CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    name: Test & Lint (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.10", "3.11"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v5

    - name: Install dependencies
      run: uv sync --all-extras --dev

    - name: Type checking (mypy)
      run: uvx mypy py_launch_blueprint

    - name: Linting (ruff)
      run: uvx ruff check py_launch_blueprint tests

    - name: Run tests with coverage
      run: uv run pytest --cov=py_launch_blueprint --cov-report=term-missing

    - name: Upload coverage report
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

  security:
    name: Security Audit
    if: github.event.pull_request.head.repo.full_name == github.repository
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v5

    - name: Install dependencies
      run: uv sync --all-extras --dev

    - name: Run Safety CLI
      uses: pyupio/safety-action@v1
      with:
        api-key: ${{ secrets.SAFETY_API_KEY }}
        args: --full-report

  publish:
    name: Publish to PyPI
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [test, security]
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v5

    - name: Build and publish package
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      run: |
        uv pip install build twine
        python -m build
        twine upload dist/*
