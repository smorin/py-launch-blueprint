name: CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  continuous-integration:
    name: continuous-integration
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]

    steps:
      - uses: actions/checkout@v4

      - name: Install uv CLI
        uses: astral-sh/setup-uv@v5

      - name: Install Just
        uses: extractions/setup-just@v2

      - name: Create virtual environment and install dependencies
        run: |
          uv venv .venv
          uv sync --all-extras --dev
          echo "$PWD/.venv/bin" >> $GITHUB_PATH

      - name: Check if uv.lock is up to date
        run: |
          source .venv/bin/activate
          uv lock > uv.lock.new
          if ! cmp -s uv.lock uv.lock.new; then
            echo "❌ uv.lock is outdated. Please run 'uv lock' locally and commit the updated lockfile."
            diff -u uv.lock uv.lock.new || true
            exit 1
          else
            echo "✅ uv.lock is up to date."
          fi
          rm uv.lock.new

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Run type checker (mypy)
        run: uvx mypy py_launch_blueprint/

      - name: Run linter (ruff)
        run: uvx ruff check py_launch_blueprint/

      - name: Install Taplo
        run: just install-taplo

      - name: Check TOML formatting
        run: taplo check '**/*.toml'

      - name: Run pre-commit hooks
        run: |
          just pre-commit-setup
          just pre-commit-run

      # Uncomment below to run tests
      # - name: Run tests with coverage
      #   run: |
      #     pytest --cov=./ --cov-report=xml

      # Uncomment to upload coverage
      # - name: Upload coverage
      #   uses: codecov/codecov-action@v4
